name: Tests

on:
  push:
    branches: [ main, develop ]
  pull_request:
    branches: [ main, develop ]
  workflow_dispatch:

permissions:
  contents: read
  pull-requests: write
  issues: write

env:
  NODE_VERSION: '20.x'

jobs:
  test:
    runs-on: ubuntu-latest
    timeout-minutes: 15
    strategy:
      matrix:
        project: [backend, frontend]
      fail-fast: false  # Continue testing other projects even if one fails

    steps:
    - name: üì¶ Checkout repository
      uses: actions/checkout@v4

    - name: üü¢ Setup Node.js ${{ env.NODE_VERSION }}
      uses: actions/setup-node@v4
      with:
        node-version: ${{ env.NODE_VERSION }}

    - name: üîß Cache node modules
      uses: actions/cache@v4
      with:
        path: ${{ matrix.project }}/node_modules
        key: ${{ runner.os }}-${{ matrix.project }}-node-${{ hashFiles(format('{0}/package-lock.json', matrix.project)) }}
        restore-keys: |
          ${{ runner.os }}-${{ matrix.project }}-node-

    - name: üîß Install dependencies
      working-directory: './${{ matrix.project }}'
      run: |
        if [ -f package-lock.json ]; then
          npm ci
        else
          npm install
        fi

    - name: üß™ Run tests with coverage
      working-directory: './${{ matrix.project }}'
      run: |
        npm run test:coverage 2>&1 | tee test-output.log
      continue-on-error: true

    - name: üìä Parse test results
      id: test-results
      working-directory: './${{ matrix.project }}'
      run: |
        # Parse test results from output
        TEST_OUTPUT=$(cat test-output.log)
        
        # Extract test suites count using more precise regex
        SUITES_LINE=$(echo "$TEST_OUTPUT" | grep "Test Suites:" | tail -1)
        if [[ $SUITES_LINE =~ ([0-9]+)\ passed.*([0-9]+)\ total ]]; then
          SUITES_PASSED="${BASH_REMATCH[1]}"
          SUITES_TOTAL="${BASH_REMATCH[2]}"
        else
          SUITES_PASSED="0"
          SUITES_TOTAL="0"
        fi
        
        # Extract individual tests count using more precise regex
        TESTS_LINE=$(echo "$TEST_OUTPUT" | grep "Tests:" | tail -1)
        if [[ $TESTS_LINE =~ ([0-9]+)\ passed.*([0-9]+)\ total ]]; then
          TESTS_PASSED="${BASH_REMATCH[1]}"
          TESTS_TOTAL="${BASH_REMATCH[2]}"
        else
          TESTS_PASSED="0"
          TESTS_TOTAL="0"
        fi
        
        # Extract coverage percentage
        COVERAGE_LINE=$(echo "$TEST_OUTPUT" | grep "All files" | head -1)
        if [[ $COVERAGE_LINE =~ ([0-9]+\.?[0-9]*) ]]; then
          COVERAGE="${BASH_REMATCH[1]}%"
        else
          COVERAGE="Unknown"
        fi
        
        # Check if all tests passed
        if [ "$SUITES_PASSED" = "$SUITES_TOTAL" ] && [ "$TESTS_PASSED" = "$TESTS_TOTAL" ] && [ "$TESTS_TOTAL" -gt "0" ]; then
          TEST_STATUS="‚úÖ All tests passed"
          EXIT_CODE=0
        else
          TEST_STATUS="‚ùå Some tests failed"
          EXIT_CODE=1
        fi
        
        # Debug output
        echo "[${{ matrix.project }}] Raw suites line: $SUITES_LINE"
        echo "[${{ matrix.project }}] Raw tests line: $TESTS_LINE"
        echo "[${{ matrix.project }}] Raw coverage line: $COVERAGE_LINE"
        echo "[${{ matrix.project }}] Parsed: Suites $SUITES_PASSED/$SUITES_TOTAL, Tests $TESTS_PASSED/$TESTS_TOTAL, Coverage $COVERAGE"
        
        # Export results
        echo "suites-passed=$SUITES_PASSED" >> $GITHUB_OUTPUT
        echo "suites-total=$SUITES_TOTAL" >> $GITHUB_OUTPUT
        echo "tests-passed=$TESTS_PASSED" >> $GITHUB_OUTPUT
        echo "tests-total=$TESTS_TOTAL" >> $GITHUB_OUTPUT
        echo "coverage=$COVERAGE" >> $GITHUB_OUTPUT
        echo "status=$TEST_STATUS" >> $GITHUB_OUTPUT
        echo "exit-code=$EXIT_CODE" >> $GITHUB_OUTPUT
        echo "project=${{ matrix.project }}" >> $GITHUB_OUTPUT

    - name: üìã Generate test summary
      if: always()
      run: |
        echo "## üß™ ${{ matrix.project }} Test Results" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY
        echo "| Metric | Result |" >> $GITHUB_STEP_SUMMARY
        echo "|--------|--------|" >> $GITHUB_STEP_SUMMARY
        echo "| **Status** | ${{ steps.test-results.outputs.status }} |" >> $GITHUB_STEP_SUMMARY
        echo "| **Test Suites** | ${{ steps.test-results.outputs.suites-passed }}/${{ steps.test-results.outputs.suites-total }} passed |" >> $GITHUB_STEP_SUMMARY
        echo "| **Individual Tests** | ${{ steps.test-results.outputs.tests-passed }}/${{ steps.test-results.outputs.tests-total }} passed |" >> $GITHUB_STEP_SUMMARY
        echo "| **Coverage** | ${{ steps.test-results.outputs.coverage }} |" >> $GITHUB_STEP_SUMMARY
        echo "" >> $GITHUB_STEP_SUMMARY

    - name: üìä Upload coverage reports
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: coverage-report-${{ matrix.project }}-${{ github.run_number }}
        path: '${{ matrix.project }}/coverage/'
        retention-days: 30

    # Store results for aggregation
    - name: üíæ Store test results
      if: always()
      run: |
        mkdir -p /tmp/test-results
        echo "${{ steps.test-results.outputs.project }}|${{ steps.test-results.outputs.status }}|${{ steps.test-results.outputs.suites-passed }}|${{ steps.test-results.outputs.suites-total }}|${{ steps.test-results.outputs.tests-passed }}|${{ steps.test-results.outputs.tests-total }}|${{ steps.test-results.outputs.coverage }}|${{ steps.test-results.outputs.exit-code }}" > /tmp/test-results/${{ matrix.project }}.txt

    - name: üì§ Upload test results
      if: always()
      uses: actions/upload-artifact@v4
      with:
        name: test-results-${{ matrix.project }}
        path: /tmp/test-results/
        retention-days: 1

    - name: ‚ùå Fail if tests failed
      if: steps.test-results.outputs.exit-code != '0'
      run: |
        echo "[${{ matrix.project }}] Tests failed! Check the summary above for details."
        exit 1

  # Aggregate results and comment on PR
  test-summary:
    runs-on: ubuntu-latest
    needs: test
    if: always() && github.event_name == 'pull_request'
    steps:
    - name: üì• Download test results
      uses: actions/download-artifact@v4
      with:
        pattern: test-results-*
        merge-multiple: true
        path: /tmp/test-results

    - name: üìù Collect test results
      id: collect-results
      run: |
        # Initialize variables
        BACKEND_STATUS="‚ùå Failed"
        FRONTEND_STATUS="‚ùå Failed"
        BACKEND_DETAILS="Not run"
        FRONTEND_DETAILS="Not run"
        OVERALL_SUCCESS=true
        
        # Read backend results if available
        if [ -f "/tmp/test-results/backend.txt" ]; then
          BACKEND_DATA=$(cat /tmp/test-results/backend.txt)
          IFS='|' read -r PROJECT STATUS SUITES_PASSED SUITES_TOTAL TESTS_PASSED TESTS_TOTAL COVERAGE EXIT_CODE <<< "$BACKEND_DATA"
          if [ "$EXIT_CODE" = "0" ]; then
            BACKEND_STATUS="‚úÖ Passed"
          else
            OVERALL_SUCCESS=false
          fi
          BACKEND_DETAILS="$TESTS_PASSED/$TESTS_TOTAL tests, $SUITES_PASSED/$SUITES_TOTAL suites, $COVERAGE coverage"
        else
          OVERALL_SUCCESS=false
        fi
        
        # Read frontend results if available
        if [ -f "/tmp/test-results/frontend.txt" ]; then
          FRONTEND_DATA=$(cat /tmp/test-results/frontend.txt)
          IFS='|' read -r PROJECT STATUS SUITES_PASSED SUITES_TOTAL TESTS_PASSED TESTS_TOTAL COVERAGE EXIT_CODE <<< "$FRONTEND_DATA"
          if [ "$EXIT_CODE" = "0" ]; then
            FRONTEND_STATUS="‚úÖ Passed"
          else
            OVERALL_SUCCESS=false
          fi
          FRONTEND_DETAILS="$TESTS_PASSED/$TESTS_TOTAL tests, $SUITES_PASSED/$SUITES_TOTAL suites, $COVERAGE coverage"
        else
          OVERALL_SUCCESS=false
        fi
        
        # Set overall status
        if [ "$OVERALL_SUCCESS" = true ]; then
          OVERALL_STATUS="‚úÖ All projects passed"
        else
          OVERALL_STATUS="‚ùå Some projects failed"
        fi
        
        # Export results
        echo "overall-status=$OVERALL_STATUS" >> $GITHUB_OUTPUT
        echo "backend-status=$BACKEND_STATUS" >> $GITHUB_OUTPUT
        echo "frontend-status=$FRONTEND_STATUS" >> $GITHUB_OUTPUT
        echo "backend-details=$BACKEND_DETAILS" >> $GITHUB_OUTPUT
        echo "frontend-details=$FRONTEND_DETAILS" >> $GITHUB_OUTPUT

    - name: üí¨ Comment on PR
      uses: actions/github-script@v7
      continue-on-error: true
      with:
        script: |
          try {
            const { data: comments } = await github.rest.issues.listComments({
              owner: context.repo.owner,
              repo: context.repo.repo,
              issue_number: context.issue.number,
            });
            
            const botComment = comments.find(comment => 
              comment.user.type === 'Bot' && comment.body.includes('üß™ Test Results Summary')
            );
            
            const body = `## üß™ Test Results Summary
            
            ${{ steps.collect-results.outputs.overall-status }}
            
            ### üìä Project Results
            
            | Project | Status | Details |
            |---------|--------|---------|
            | **Backend** | ${{ steps.collect-results.outputs.backend-status }} | ${{ steps.collect-results.outputs.backend-details }} |
            | **Frontend** | ${{ steps.collect-results.outputs.frontend-status }} | ${{ steps.collect-results.outputs.frontend-details }} |
            
            ### üìã Coverage Reports
            - üìä **Backend Coverage**: [Download Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            - üìä **Frontend Coverage**: [Download Report](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }})
            
            > üí° **Tip**: Click on the individual job details in the [Actions tab](https://github.com/${{ github.repository }}/actions/runs/${{ github.run_id }}) to see detailed test results for each project.
            
            ---
            *Updated at: ${new Date().toISOString()}*`;
            
            if (botComment) {
              await github.rest.issues.updateComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                comment_id: botComment.id,
                body: body
              });
            } else {
              await github.rest.issues.createComment({
                owner: context.repo.owner,
                repo: context.repo.repo,
                issue_number: context.issue.number,
                body: body
              });
            }
          } catch (error) {
            console.log('Could not comment on PR due to permissions. Results available in job summary.');
            console.log('Error:', error.message);
          } 
